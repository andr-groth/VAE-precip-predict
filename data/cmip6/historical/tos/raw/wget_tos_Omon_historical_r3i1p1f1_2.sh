#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/05/02 07:22:41
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r3i1p1f1.Omon.tos.gn.v20200811|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5-1.historical.r3i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-2-0.historical.r3i1p1f1.Omon.tos.gr.v20221114|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-LR.historical.r3i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r3i1p1f1.Omon.tos.gr1.v20190703|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r3i1p1f1.Omon.tos.gn.v20191218|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.FIO-QLNM.FIO-ESM-2-0.historical.r3i1p1f1.Omon.tos.gn.v20191122|cmip.fio.org.cn&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR.historical.r3i1p1f1.Omon.tos.gn.v20180803|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.NCC.NorCPM1.historical.r3i1p1f1.Omon.tos.gn.v20200724|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.Omon.tos.gn.v20200702|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.NCC.NorESM2-LM.historical.r3i1p1f1.Omon.tos.gn.v20190920|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.CSIRO-ARCCSS.ACCESS-CM2.historical.r3i1p1f1.Omon.tos.gn.v20200306|esgf.nci.org.au&dataset_id=CMIP6.CMIP.CSIRO.ACCESS-ESM1-5.historical.r3i1p1f1.Omon.tos.gn.v20191203|esgf.nci.org.au
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r3i1p1f1.Omon.tos.gn.v20200811|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5-1.historical.r3i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-2-0.historical.r3i1p1f1.Omon.tos.gr.v20221114|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-LR.historical.r3i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r3i1p1f1.Omon.tos.gr1.v20190703|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r3i1p1f1.Omon.tos.gn.v20191218|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.FIO-QLNM.FIO-ESM-2-0.historical.r3i1p1f1.Omon.tos.gn.v20191122|cmip.fio.org.cn&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR.historical.r3i1p1f1.Omon.tos.gn.v20180803|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.NCC.NorCPM1.historical.r3i1p1f1.Omon.tos.gn.v20200724|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r3i1p1f1.Omon.tos.gn.v20200702|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.NCC.NorESM2-LM.historical.r3i1p1f1.Omon.tos.gn.v20190920|noresg.nird.sigma2.no&dataset_id=CMIP6.CMIP.CSIRO-ARCCSS.ACCESS-CM2.historical.r3i1p1f1.Omon.tos.gn.v20200306|esgf.nci.org.au&dataset_id=CMIP6.CMIP.CSIRO.ACCESS-ESM1-5.historical.r3i1p1f1.Omon.tos.gn.v20191203|esgf.nci.org.au'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_FGOALS-g3_historical_r3i1p1f1_gn_185001-201412.nc' 'https://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r3i1p1f1/Omon/tos/gn/v20200811/tos_Omon_FGOALS-g3_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'dab09bf517ab0e67cfd6844366726fef7d0fa749a34c6d6b990671540ddf65fe'
'tos_Omon_CanESM5-1_historical_r3i1p1f1_gn_185001-201412.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgH_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5-1/historical/r3i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5-1_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'd68d914dc8eed018a28a3c75d48f57afd54eed3c293dfcd15dae87e9ae19a7c2'
'tos_Omon_ACCESS-CM2_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/CMIP/CSIRO-ARCCSS/ACCESS-CM2/historical/r3i1p1f1/Omon/tos/gn/v20200306/tos_Omon_ACCESS-CM2_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '99d26a62b1c4d8d0eb96b8d30653f0b0474be6c3cfedc1a26ab5b03f3e4ae4fe'
'tos_Omon_ACCESS-ESM1-5_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esgf.nci.org.au/thredds/fileServer/master/CMIP6/CMIP/CSIRO/ACCESS-ESM1-5/historical/r3i1p1f1/Omon/tos/gn/v20191203/tos_Omon_ACCESS-ESM1-5_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '7693a8ce38af2747343ec5b56045520cfc063ce38604de8f699e7c1a7d327a77'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_185001-185912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_185001-185912.nc' 'SHA256' '89759a363b58e406604fe0e1925870b708e91c2ffaa1a5b4c33672af26f1b169'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_186001-186912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_186001-186912.nc' 'SHA256' 'b163c6a02bcfd4febe3a5d4e2a705a76c4cb35f5015133617f48e80170894614'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_187001-187912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_187001-187912.nc' 'SHA256' '370c8980317f6069c2e0c0992e7d962c5b3831d0f3d8e8c7348d14b61891dc59'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_188001-188912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_188001-188912.nc' 'SHA256' '2a6089f992cbd64b9b5a20c7e45f179114a7bc566eb9b081689b6617b8780927'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_189001-189912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_189001-189912.nc' 'SHA256' '6624b6ff1c3333d0b6030c1d89081978e5675a237fdecbe490d75f238f01d71e'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_190001-190912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_190001-190912.nc' 'SHA256' '277684af8d10ac16a0fc88256f42b98265eb57c5140bd441e103f963c2670b11'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_191001-191912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_191001-191912.nc' 'SHA256' '34e5db760f9706d3b930de3587d9a1c1d266e62a6a7041f394c6868efadd41bb'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_192001-192912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_192001-192912.nc' 'SHA256' 'd7ee3cb5c4b496d06b62af5bd6a7e6cb3ab970b24282928ae3ab3a771a2c9ab5'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_193001-193912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_193001-193912.nc' 'SHA256' '68a5ad438ba37548ea1e064c52d1688361c7f0e1ea43e28074c436834e878f7e'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_194001-194912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_194001-194912.nc' 'SHA256' 'f18e6e30ad98abe005b05ee6b93341e22e95f06b0a7952b91e9858239f29d4e9'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_195001-195912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_195001-195912.nc' 'SHA256' '265b1ee39681fb147a461887f781e0714abb24c80f68bd1055dde4b6c5b655b8'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_196001-196912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_196001-196912.nc' 'SHA256' 'f797519fbaa6e518535c205e7acb7dd5b4d4742e1201f90c278988517bb6e5cb'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_197001-197912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_197001-197912.nc' 'SHA256' '89d314d9f6c36caaae39e6ef4a94b3b9669f58d2c5fc88a5556f326d774ef3f1'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_198001-198912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_198001-198912.nc' 'SHA256' '96a33bf5c19443d8d37becb81b6d5224327c4fab9239e2e57d5008766b2006fc'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_199001-199912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_199001-199912.nc' 'SHA256' '3b96a69aa869950a5e6b1f56a8d3cc8d1e6eb214f4636d81302648a22300c4f2'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_200001-200912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_200001-200912.nc' 'SHA256' 'dd3b905ca204413707891e797e51a0a3cbaf4eeeb7e85debddb5ad8049753f70'
'tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_201001-201412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r3i1p1f1/Omon/tos/gr/v20221114/tos_Omon_E3SM-2-0_historical_r3i1p1f1_gr_201001-201412.nc' 'SHA256' '1bfd42f5e9966f4ab0be6e4cfa518d5ea7f9bf59c3082cc69178bcb07775c4a8'
'tos_Omon_FIO-ESM-2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'http://cmip.fio.org.cn/thredds/fileServer/esg_dataroot/cmip6/CMIP6/CMIP/FIO-QLNM/FIO-ESM-2-0/historical/r3i1p1f1/Omon/tos/gn/v20191122/tos_Omon_FIO-ESM-2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '6ebf089738e219fbeefdc74b9816d72efdc371de067e505acc67cafa07f488a6'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_185001-186912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_185001-186912.nc' 'SHA256' '7a4884ede3787f3c4d0615f1bd0a178754212d9ab33498adfaf46d9f4a5fcd1f'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_187001-188912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_187001-188912.nc' 'SHA256' '2378d04284dc04e03459fbda98b5e4e9b6414c411de37a7e82f6186b409c98ae'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_189001-190912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_189001-190912.nc' 'SHA256' 'ff8fae4a28eb210f4becfc2db64a8270e114ffcc98bf774971ef2edd8bc00be9'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_191001-192912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_191001-192912.nc' 'SHA256' 'cbd4eddf1b78289d503dd73711ab20160547676f96b42f5e11c72d36a0216ba7'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_193001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_193001-194912.nc' 'SHA256' 'ba0b422689ccaa95cec62b6605dd15e5b9be2e8c3fb708ab05b62a8a93d9ec79'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_195001-196912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_195001-196912.nc' 'SHA256' 'cf4357a804b4c17041d6a485da62721c65ce19ae8648408e670ee8b9f8a1f019'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_197001-198912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_197001-198912.nc' 'SHA256' '4287fbbbd4f68775e2a571e68e6d2386c2406193d872f308981105123b75648f'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_199001-200912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_199001-200912.nc' 'SHA256' '28174b5928902dc9fd49567c216b7ae72aa0013a61315829f400dc6dfe2d6ab7'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_201001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r3i1p1f1/Omon/tos/gn/v20191218/tos_Omon_MPI-ESM-1-2-HAM_historical_r3i1p1f1_gn_201001-201412.nc' 'SHA256' 'eb6032956f3f70b9cbdaeb478a66f99754367ce16029214fe5856c2fb4ec2e4e'
'tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_185001-189912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r3i1p1f1/Omon/tos/gr1/v20190703/tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_185001-189912.nc' 'SHA256' '0ab2ab02ddddad458bf358b78b366752dbe3cc0f4387af0d4f942bf8cbb16387'
'tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_190001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r3i1p1f1/Omon/tos/gr1/v20190703/tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_190001-194912.nc' 'SHA256' '7bd088e20931aa537368496e99065561bbfb47715cdabd8f016627bc7bc14683'
'tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_195001-199912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r3i1p1f1/Omon/tos/gr1/v20190703/tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_195001-199912.nc' 'SHA256' '2f997a8728435350c8513c7795b353c0ac19132ad56ce8a5b9001bfd34ab0ac0'
'tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_200001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r3i1p1f1/Omon/tos/gr1/v20190703/tos_Omon_INM-CM5-0_historical_r3i1p1f1_gr1_200001-201412.nc' 'SHA256' 'b5b6a20ef1b0f40c8eac314b1d0215f1a01983ef2ff55a3f27fa34482e0205b2'
'tos_Omon_IPSL-CM6A-LR_historical_r3i1p1f1_gn_185001-201412.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/CMIP/IPSL/IPSL-CM6A-LR/historical/r3i1p1f1/Omon/tos/gn/v20180803/tos_Omon_IPSL-CM6A-LR_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '7f8de6050322901cf719ee3be3dbf1013ae07246f7a19d81b98a21676b3440f5'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_185001-186912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_185001-186912.nc' 'SHA256' 'b5fa7c2e1ce238d7c4a4cd332fd2a4e31de4b8fb151f214497a7742d6095bc58'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_187001-188912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_187001-188912.nc' 'SHA256' '2a763592ae2d54a24629ec0f92d3981cd5e1be13d7052270be5918392c84b0d2'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_189001-190912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_189001-190912.nc' 'SHA256' 'e7b64f72888353742dfc6db261c6509ae9505382ca69e5427f67f6bf577be70d'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_191001-192912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_191001-192912.nc' 'SHA256' '4555234390cef6e2320ccfc865e6fd127e3bfc6eba2b6b17f7f762c5fef69430'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_193001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_193001-194912.nc' 'SHA256' '6427ce64016ca8228301d7ec31188fae838bcdec8f32fa10638221c70e0fc104'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_195001-196912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_195001-196912.nc' 'SHA256' 'cc18fed7e520a24fb6967e83af28c3affe0ddb1654451767d7f9c29defa70ec1'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_197001-198912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_197001-198912.nc' 'SHA256' 'a97e8e5c129d83ceb30cc7c484afa26645bb52423426a8b41688881b083a33c2'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_199001-200912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_199001-200912.nc' 'SHA256' 'ee072dc34c79b21de75ef3a94bd1684459fdeddbfdaf477db56f9856fe3d8c86'
'tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_201001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r3i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r3i1p1f1_gn_201001-201412.nc' 'SHA256' '8463b6c3aa5125e261e9331d0e992aaf199c0340ed5049948ffce1bf41af23ef'
'tos_Omon_NorCPM1_historical_r3i1p1f1_gn_185001-201412.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorCPM1/historical/r3i1p1f1/Omon/tos/gn/v20200724/tos_Omon_NorCPM1_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '23e1332b8530074836c3d24b278bad2eb91a399992c15698bc4badec111af3cc'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_185001-185912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_185001-185912.nc' 'SHA256' '71f22beb02821bbd0df2743df8d9f1a204782704c44bb72fbdce56afd0737eee'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_186001-186912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_186001-186912.nc' 'SHA256' '5a522ea786687fe4bc82cf5ec2693c9997290ac0789f34f81bcb04e60e4aa941'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_187001-187912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_187001-187912.nc' 'SHA256' 'bd8d2e6081c6bc5da8a560317b93d0c68558458805be3aa7cdc79b6e8dfdbca9'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_188001-188912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_188001-188912.nc' 'SHA256' 'd743edbfc332f5711b5a3f91ccc0706abe0cf45a6a53fd9d2624510664b3e06e'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_189001-189912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_189001-189912.nc' 'SHA256' 'adb3635d60b5bba25398d9cda1493b252cf9fd2db393b2cb733e1a51813c91cf'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_190001-190912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_190001-190912.nc' 'SHA256' '849579e56a01e7ee68790876e8eb6a914f1ed34c4ecc35f54df3431850006af3'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_191001-191912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_191001-191912.nc' 'SHA256' 'f07f4bd5a5f85185a0d97dd61643a9627e16a632566c7ece316242c59c5f03d8'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_192001-192912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_192001-192912.nc' 'SHA256' '59c61c7b8d7f454e16e18b6a09b78acb92d2aa0b9786c665748a695eb231720c'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_193001-193912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_193001-193912.nc' 'SHA256' '5346c78cdb0305bf3271569835bab0ec81fa493a4dc8abefbb939b1953b5a576'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_194001-194912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_194001-194912.nc' 'SHA256' '0150a5650aed098fc0c31786ab33a08fb441eb101055d616d4f78b4650c7767c'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_195001-195912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_195001-195912.nc' 'SHA256' 'b7e00b1307a10ba7bb951aa8fc202d108b7434c7bffdc66af3fc80a5dd2d4624'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_196001-196912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_196001-196912.nc' 'SHA256' '7f05daf7f5f2121cbaa378f5e3a385e6ecd703402abf9080087fb114a7d1fac9'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_197001-197912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_197001-197912.nc' 'SHA256' 'b9075a8444f501da7314bc50f12966115e866d9ed4c984380e0c2864c66489b4'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_198001-198912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_198001-198912.nc' 'SHA256' '0fc1e3ff431bebd97d8ff3f5aaafd6e2dcdb6ad66ecc95a843b0fbd85529f4f4'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_199001-199912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_199001-199912.nc' 'SHA256' 'fe5bf806cf0df9893d25d4d958c1ba9baa26bb6099d9cf089a38c41aa47f646b'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_200001-200912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_200001-200912.nc' 'SHA256' '4ed1b2e92822413059f20c43b3e7b6135dfcdbf00f0fb9fbf70bdef0c676dcc3'
'tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_201001-201412.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-LM/historical/r3i1p1f1/Omon/tos/gn/v20190920/tos_Omon_NorESM2-LM_historical_r3i1p1f1_gn_201001-201412.nc' 'SHA256' 'ccebc3b3ed5f63a244ad10c1d8091d5a05cf920b4b28aad597712eb5e9515f59'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_185001-185912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_185001-185912.nc' 'SHA256' '70fb897fbbf6a3cc1722665c09d1784d6344b452f2c358d623c09f3c94fdc3f9'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_186001-186912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_186001-186912.nc' 'SHA256' 'aa76481591867f2522a1410a1c14452ea89ca88810dbdae086321e775044bd68'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_187001-187912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_187001-187912.nc' 'SHA256' 'bb4781d198cabf3e32eef35c72a25676eb6cb213a0a800e4581b4197ceea08c3'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_188001-188912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_188001-188912.nc' 'SHA256' 'd9c52805ef281eee9fe56bd370f10dc29d06e0f2eef84a4031aa1d31e6e0dfab'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_189001-189912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_189001-189912.nc' 'SHA256' '93a4186819ffdf53e263f92671d92b393c51bd38ec3bee3a311ee0d29e2531be'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_190001-190912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_190001-190912.nc' 'SHA256' 'b6f60855db2de92c0622096f8cf5136fbeb28688901c4554366a3909a4f7da72'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_191001-191912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_191001-191912.nc' 'SHA256' '5a37b699f1ea204078352eecb2b6b20d9261680a43430a0b22a99b0c6b1cbfa3'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_192001-192912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_192001-192912.nc' 'SHA256' 'f0087272248a43d9d49971d1e4b58567fef4bbf9b17f742d0fd6b41a0beb9c88'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_193001-193912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_193001-193912.nc' 'SHA256' 'a9ca8082696925cd215586dc61e302f2a8a261e96acec343a6aeec52c3607f73'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_194001-194912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_194001-194912.nc' 'SHA256' 'e3bb0d0b1d41b98f94a689868980559331749287db80a0f9a4108c113b8e1595'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_195001-195912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_195001-195912.nc' 'SHA256' 'c1771dd7b0d044ddb0d40e9db8f1bd7df4c44b785e7aa9785d2607593c9b1d66'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_196001-196912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_196001-196912.nc' 'SHA256' '977d86da8dfcec1ec07ad9b808bab0da7d09168248ed8109b7c0cf16d321e7a3'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_197001-197912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_197001-197912.nc' 'SHA256' '985201b9b4eb182a8d27ad2e0856cf434709f39e5db6bc85024170d693034784'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_198001-198912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_198001-198912.nc' 'SHA256' '99fea9458fc199a403d6ad0dcd881c2a300caeaa8fca19be30e1ed5a6f7649f3'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_199001-199912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_199001-199912.nc' 'SHA256' '152c9b60b1a18a8737db7b1b9820ade0ccbaaf61367de84baaf6adadfdf35b83'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_200001-200912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_200001-200912.nc' 'SHA256' 'eb4e2d5714fb789678a4ea98593194bfe4486d92834365c91b74dbeeef956e87'
'tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_201001-201412.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r3i1p1f1/Omon/tos/gn/v20200702/tos_Omon_NorESM2-MM_historical_r3i1p1f1_gn_201001-201412.nc' 'SHA256' '601570f301564cfa1d02bc7960a15fe35c616218f2dbe365a041001e0884f47c'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 81 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
