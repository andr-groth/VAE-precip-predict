#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/04/26 03:05:03
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.MIROC.MIROC6.historical.r1i1p1f1.Omon.tos.gn.v20181212|esgf-data02.diasjp.net&dataset_id=CMIP6.CMIP.THU.CIESM.historical.r1i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-H.historical.r1i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.CAS.CAS-ESM2-0.historical.r1i1p1f1.Omon.tos.gn.v20201228|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r1i1p1f1.Omon.tos.gn.v20191107|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5-1.historical.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-2-0.historical.r1i1p1f1.Omon.tos.gr.v20221112|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.CAMS.CAMS-CSM1-0.historical.r1i1p1f1.Omon.tos.gn.v20190708|esg.camscma.cn&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-LR.historical.r1i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM4-8.historical.r1i1p1f1.Omon.tos.gr1.v20190530|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.Omon.tos.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.Omon.tos.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.CMCC.CMCC-CM2-SR5.historical.r1i1p1f1.Omon.tos.gn.v20200616|esgf-node2.cmcc.it&dataset_id=CMIP6.CMIP.CMCC.CMCC-ESM2.historical.r1i1p1f1.Omon.tos.gn.v20210114|esgf-node2.cmcc.it&dataset_id=CMIP6.CMIP.FIO-QLNM.FIO-ESM-2-0.historical.r1i1p1f1.Omon.tos.gn.v20191122|cmip.fio.org.cn&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR.historical.r1i1p1f1.Omon.tos.gn.v20180803|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM5A2-INCA.historical.r1i1p1f1.Omon.tos.gn.v20200729|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR-INCA.historical.r1i1p1f1.Omon.tos.gn.v20210216|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.MIROC.MIROC6.historical.r1i1p1f1.Omon.tos.gn.v20181212|esgf-data02.diasjp.net&dataset_id=CMIP6.CMIP.THU.CIESM.historical.r1i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-H.historical.r1i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.CAS.CAS-ESM2-0.historical.r1i1p1f1.Omon.tos.gn.v20201228|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CAS.FGOALS-g3.historical.r1i1p1f1.Omon.tos.gn.v20191107|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5-1.historical.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-2-0.historical.r1i1p1f1.Omon.tos.gr.v20221112|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.CAMS.CAMS-CSM1-0.historical.r1i1p1f1.Omon.tos.gn.v20190708|esg.camscma.cn&dataset_id=CMIP6.CMIP.MPI-M.MPI-ESM1-2-LR.historical.r1i1p1f1.Omon.tos.gn.v20190710|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM4-8.historical.r1i1p1f1.Omon.tos.gr1.v20190530|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.INM.INM-CM5-0.historical.r1i1p1f1.Omon.tos.gr1.v20190610|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.HAMMOZ-Consortium.MPI-ESM-1-2-HAM.historical.r1i1p1f1.Omon.tos.gn.v20190627|esgf3.dkrz.de&dataset_id=CMIP6.CMIP.CMCC.CMCC-CM2-SR5.historical.r1i1p1f1.Omon.tos.gn.v20200616|esgf-node2.cmcc.it&dataset_id=CMIP6.CMIP.CMCC.CMCC-ESM2.historical.r1i1p1f1.Omon.tos.gn.v20210114|esgf-node2.cmcc.it&dataset_id=CMIP6.CMIP.FIO-QLNM.FIO-ESM-2-0.historical.r1i1p1f1.Omon.tos.gn.v20191122|cmip.fio.org.cn&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR.historical.r1i1p1f1.Omon.tos.gn.v20180803|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM5A2-INCA.historical.r1i1p1f1.Omon.tos.gn.v20200729|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.IPSL.IPSL-CM6A-LR-INCA.historical.r1i1p1f1.Omon.tos.gn.v20210216|vesg.ipsl.upmc.fr&dataset_id=CMIP6.CMIP.NCC.NorESM2-MM.historical.r1i1p1f1.Omon.tos.gn.v20191108|noresg.nird.sigma2.no'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_CAMS-CSM1-0_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esg.camscma.cn/thredds/fileServer/cmip6/CMIP6/CMIP/CAMS/CAMS-CSM1-0/historical/r1i1p1f1/Omon/tos/gn/v20190708/tos_Omon_CAMS-CSM1-0_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'e9cd3d4d5c8ab27584d1cb67bb59394c45662363cd9ee8c4fa24353a5f0a17de'
'tos_Omon_CAS-ESM2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'https://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/CAS-ESM2-0/historical/r1i1p1f1/Omon/tos/gn/v20201228/tos_Omon_CAS-ESM2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'b978ba7e3cbe3d25ad4bb447ac6fbb4da1bc73757cd1efe0c2e0054be40c31c6'
'tos_Omon_FGOALS-g3_historical_r1i1p1f1_gn_185001-201412.nc' 'https://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-g3/historical/r1i1p1f1/Omon/tos/gn/v20191107/tos_Omon_FGOALS-g3_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '3ac833221aeb392fad2ee2e8a3ddc2b448f5134ac9b39771067e2a38f70a31cb'
'tos_Omon_CanESM5-1_historical_r1i1p1f1_gn_185001-201412.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgH_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5-1/historical/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5-1_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '0523a7dd967d89530711adf885a911404217e307476e4fbf03174b55ce0fb978'
'tos_Omon_CMCC-CM2-SR5_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-node2.cmcc.it/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CMCC/CMCC-CM2-SR5/historical/r1i1p1f1/Omon/tos/gn/v20200616/tos_Omon_CMCC-CM2-SR5_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '98cbdf6de77ddb6d0fc127a022e39c8ac48ea4b02d3103448e88f76483421032'
'tos_Omon_CMCC-ESM2_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-node2.cmcc.it/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CMCC/CMCC-ESM2/historical/r1i1p1f1/Omon/tos/gn/v20210114/tos_Omon_CMCC-ESM2_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'dbb91b00d02e81a221197541efa9713118905bc4318be2ac91ef8b920f4ff170'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_185001-185912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_185001-185912.nc' 'SHA256' 'e18115a285e6ba1230359d8f4a27c7f6711102be5426d5968dcbce3a6c486560'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_186001-186912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_186001-186912.nc' 'SHA256' 'bbe7207fed7cce0d54e743de3438d225d3004efe14906659ec05b3da1209abe6'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_187001-187912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_187001-187912.nc' 'SHA256' 'de6396f2d3b743871de09e5ea4b35165d6b029872f0f648643d60702984d5fea'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_188001-188912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_188001-188912.nc' 'SHA256' '79b6d6d609180bcdc5c2c057d5e59251e91872c5b6119a08a78312fe63e3bfb6'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_189001-189912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_189001-189912.nc' 'SHA256' '92bf8d764c1db0ed39dfdc81f14a377d4ec86fa3fe68def80861a906d6c81b17'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_190001-190912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_190001-190912.nc' 'SHA256' '1120c73722aa4b861dbee923ec93ad76b334611954c1878abe380431ea8bad82'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_191001-191912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_191001-191912.nc' 'SHA256' '5ce75a9a49b019f3a585f0c87f50bddeca8828dbe663cb8812cef2f856407c67'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_192001-192912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_192001-192912.nc' 'SHA256' '26caada67bdd98229f36c0b8c7cb4d3c21fd0b0b5dfff8fb40a3482f6d4b498c'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_193001-193912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_193001-193912.nc' 'SHA256' '51a000b06b7de9864d9b421afec0da1cec956638df59d791fa386e3ffb439845'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_194001-194912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_194001-194912.nc' 'SHA256' '291bd73edeae5c09120080ad5d313b8ce41af2b347e44b94e3f5b2af49ede365'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_195001-195912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_195001-195912.nc' 'SHA256' '18cb38c34888c80181777dfe51c2ecf31742a410a1e50eaacff7e29fc59f2eeb'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_196001-196912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_196001-196912.nc' 'SHA256' 'cee2205e342e6fbb44ce347caa808c4c26b8d4cad27b67e5391e0c6d39fd31c1'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_197001-197912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_197001-197912.nc' 'SHA256' '47bd10af1f8b65c7c759f45e87dd30011d6ab1f8d1922a39e5aa91e91b5769e0'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_198001-198912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_198001-198912.nc' 'SHA256' 'fd0a5980e3c148dc3cace25c6219addb5bba813548b879b27d868ddeb1d7374d'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_199001-199912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_199001-199912.nc' 'SHA256' '1376e99a4b945b6224fba4a8664d90da053996aa62241710dc12ff5483e63406'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_200001-200912.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_200001-200912.nc' 'SHA256' 'ec1f83f7e1d3d68891d42560d213159d28b6b70342f4adc07e7757295f3704e9'
'tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_201001-201412.nc' 'https://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-2-0/historical/r1i1p1f1/Omon/tos/gr/v20221112/tos_Omon_E3SM-2-0_historical_r1i1p1f1_gr_201001-201412.nc' 'SHA256' 'c51993cb690028f42d4aabf92aa13e567c98660795208ee1766251200eb984c2'
'tos_Omon_FIO-ESM-2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'http://cmip.fio.org.cn/thredds/fileServer/esg_dataroot/cmip6/CMIP6/CMIP/FIO-QLNM/FIO-ESM-2-0/historical/r1i1p1f1/Omon/tos/gn/v20191122/tos_Omon_FIO-ESM-2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'c31da8e051b94d7f4175de8991c5de5bbcb9ae1feb45e1a3b29e7e8708d19262'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_185001-186912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_185001-186912.nc' 'SHA256' '6901cf8a0c3b4663545bc8175544f95ab1fa10f7b2de2ca4472e16d9ea971576'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_187001-188912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_187001-188912.nc' 'SHA256' 'f8d36d2fefdd3b4fcd7a8eba2736edcd197bc784530d4c3e62d4b34e0747e297'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_189001-190912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_189001-190912.nc' 'SHA256' '8338cb4d1ccce39c626aa7c2587ce06c2037f30c721729fd7ee2c785a51f4a3c'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_191001-192912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_191001-192912.nc' 'SHA256' '8ae57897f9365142ecf923924b3bf2a4abcc63f7f52ca79be82a6cf451153be2'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_193001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_193001-194912.nc' 'SHA256' '158eeb6bd9e2e2246ec1fdb8ac751f602bc49f2514cedd3b50d082d74f4c7f21'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_195001-196912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_195001-196912.nc' 'SHA256' 'ce851ba9aed80f69cf19214c780ddb489bfe5386b0bb485dfc2881263f9eafa9'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_197001-198912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_197001-198912.nc' 'SHA256' 'b2e9be9c894cb499889c1aa8ddafbafa6cd4a4f8faae766453f9c00f13a1536a'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_199001-200912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_199001-200912.nc' 'SHA256' '7765a0bf20a52c1d514cb3fccd96d39759869577c5d1a9e3b225d11b681fd000'
'tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_201001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/HAMMOZ-Consortium/MPI-ESM-1-2-HAM/historical/r1i1p1f1/Omon/tos/gn/v20190627/tos_Omon_MPI-ESM-1-2-HAM_historical_r1i1p1f1_gn_201001-201412.nc' 'SHA256' '97855c6479da542e4c88c82d75ad5797d487621f9144952031e2e130f4d7227b'
'tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_185001-189912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM4-8/historical/r1i1p1f1/Omon/tos/gr1/v20190530/tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_185001-189912.nc' 'SHA256' '8250be50382f75e1d1f7b793fe2b89102bd8633f117ab677a075f2f6f6de6ece'
'tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_190001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM4-8/historical/r1i1p1f1/Omon/tos/gr1/v20190530/tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_190001-194912.nc' 'SHA256' '918fa9cc4df0deda12ed5549219c824c2d3b0614fad9cc61604c3995a805b110'
'tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_195001-199912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM4-8/historical/r1i1p1f1/Omon/tos/gr1/v20190530/tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_195001-199912.nc' 'SHA256' '269f2d94fa08a30006929c55466343af4fb14ee584c77f8608ff1b0f6c0754c9'
'tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_200001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM4-8/historical/r1i1p1f1/Omon/tos/gr1/v20190530/tos_Omon_INM-CM4-8_historical_r1i1p1f1_gr1_200001-201412.nc' 'SHA256' 'd83e2a6b5864a60f1131f8a1907cc14855059f78f449e1c4847dd5c789d1b00d'
'tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_185001-189912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/Omon/tos/gr1/v20190610/tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_185001-189912.nc' 'SHA256' 'b38ef311e6c5fcb5b3f4411cf97cdd29341fd035a8e8f1330b3805ccb6d25087'
'tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_190001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/Omon/tos/gr1/v20190610/tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_190001-194912.nc' 'SHA256' 'd2df847b7d268e1ca5347c025b558ccfe8922697d9ba36525c98dfb496375337'
'tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_195001-199912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/Omon/tos/gr1/v20190610/tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_195001-199912.nc' 'SHA256' 'dbdeec9525d0c7c62afb1103dc770be30761629aaf2382796a2d0d279c4deffc'
'tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_200001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/INM/INM-CM5-0/historical/r1i1p1f1/Omon/tos/gr1/v20190610/tos_Omon_INM-CM5-0_historical_r1i1p1f1_gr1_200001-201412.nc' 'SHA256' '42160a890e79500e98d0aa205bd4cabd0c0fcba500723d71f64a280f2d3b018d'
'tos_Omon_IPSL-CM5A2-INCA_historical_r1i1p1f1_gn_185001-201412.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/CMIP/IPSL/IPSL-CM5A2-INCA/historical/r1i1p1f1/Omon/tos/gn/v20200729/tos_Omon_IPSL-CM5A2-INCA_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '9a95a525fb777501e96e8a60ec251a7241ece192cf998d5918c4e9399eb9d955'
'tos_Omon_IPSL-CM6A-LR-INCA_historical_r1i1p1f1_gn_185001-201412.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/CMIP/IPSL/IPSL-CM6A-LR-INCA/historical/r1i1p1f1/Omon/tos/gn/v20210216/tos_Omon_IPSL-CM6A-LR-INCA_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'a48cee37520faaa418bf36c2aece4163fe1b8c001a107a7ceae2e48a49bb3220'
'tos_Omon_IPSL-CM6A-LR_historical_r1i1p1f1_gn_185001-201412.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip6/CMIP/IPSL/IPSL-CM6A-LR/historical/r1i1p1f1/Omon/tos/gn/v20180803/tos_Omon_IPSL-CM6A-LR_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'ec7c3db92ff53196cb57f8efcaca578b6cf7694ad3b0b2caf871edd4b62409d0'
'tos_Omon_MIROC6_historical_r1i1p1f1_gn_185001-194912.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MIROC/MIROC6/historical/r1i1p1f1/Omon/tos/gn/v20181212/tos_Omon_MIROC6_historical_r1i1p1f1_gn_185001-194912.nc' 'SHA256' '5874afa31254911001ecdb26b0703576e8883f796b076768ba47791104cabbbc'
'tos_Omon_MIROC6_historical_r1i1p1f1_gn_195001-201412.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MIROC/MIROC6/historical/r1i1p1f1/Omon/tos/gn/v20181212/tos_Omon_MIROC6_historical_r1i1p1f1_gn_195001-201412.nc' 'SHA256' '681bb04ea087e4353ab1b0ebd29a7649393960166d53819291b6587be53ccba5'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_185001-186912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_185001-186912.nc' 'SHA256' 'a17c3256f5c7078f15440122956d185f9dc17c21da23bda98e2cdb9ddf6b33bf'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_187001-188912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_187001-188912.nc' 'SHA256' '0ff77384b76ea09043ad8b64b940b850098f966818405280013bff93494f2bbf'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_189001-190912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_189001-190912.nc' 'SHA256' '13fae3ff3edce60fa4f1192b075807988751d1b0829237524e38891fd57ef59e'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_191001-192912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_191001-192912.nc' 'SHA256' '2b905362da2ca4d483d6708be73b83bf0c7f45873c61d83a765e91a9c62d49b9'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_193001-194912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_193001-194912.nc' 'SHA256' '2954311eaf2db0248d9bec8664b1abb5154b7abb97c7d0a041553f2ee4c208a4'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_195001-196912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_195001-196912.nc' 'SHA256' '96fd8c3815ca7f1b3130e49d59d940c76f26e351651c3af4e8c231010f2aef35'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_197001-198912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_197001-198912.nc' 'SHA256' '5c3196c164907a42c1745f6b4fee75b63e8e43854833bb3176b6d43c15736e73'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_199001-200912.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_199001-200912.nc' 'SHA256' '8873ee0c216642b94ec9ce7bf75f4056d0fec322a8154af2efc59c51d64af555'
'tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_201001-201412.nc' 'http://esgf3.dkrz.de/thredds/fileServer/cmip6/CMIP/MPI-M/MPI-ESM1-2-LR/historical/r1i1p1f1/Omon/tos/gn/v20190710/tos_Omon_MPI-ESM1-2-LR_historical_r1i1p1f1_gn_201001-201412.nc' 'SHA256' '1c6579581bf0c3b397a75efeb8b000af56807b3c61f6109c6137820c2deca02d'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_185001-187512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_185001-187512.nc' 'SHA256' '8b8b15f78ef9e2731578da14486ce3cf91553a3fed601d2aed08cbbed7a908d8'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_187601-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_187601-190012.nc' 'SHA256' '2b93d2975f92ce93de20096dd723d39d1c21616463770064e6ea0fbe007dd172'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_190101-192512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_190101-192512.nc' 'SHA256' 'fa9e0a1741d31117885dac0aaf9870dfa0efd41cdc4eef1a6aadd803a1f53161'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_192601-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_192601-195012.nc' 'SHA256' '4325bd736b5dc34ef7fe183f60b8a5b5a761547e7b75f2497482d7e59c9d5b3f'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_195101-197512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_195101-197512.nc' 'SHA256' 'c1f9cc963778c81187f54638b3a281a31b6f4f92b1d45c8852df51cb63c77fbb'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_197601-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_197601-200012.nc' 'SHA256' '81fb65ac0ee55613760b7f4e022330bb46dffb0648359c5db02ead35e1f42e27'
'tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r1i1p1f1_gn_200101-201412.nc' 'SHA256' 'fbb236bae958cc0a9d9182c58663cfd02588209792e13e1e913b84e1858365cf'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_185001-185912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_185001-185912.nc' 'SHA256' '3cda502c8846f935e5a1f4f921b28522a3a40c40c7e64a878e2fc22778d410e6'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_186001-186912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_186001-186912.nc' 'SHA256' '6672f85d2ae2c2b15f1e1b9c7bccceaa93096809b9e0d0e3e51b1af2a62306d4'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_187001-187912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_187001-187912.nc' 'SHA256' '218c4ed6d7b3e7f05352458c1183c2daccf9031d32e65184617547272f83ffca'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_188001-188912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_188001-188912.nc' 'SHA256' '78bbb17cc3d123065a0ca92598796c210603c1a59ff89cd8685c2ed9e5397996'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_189001-189912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_189001-189912.nc' 'SHA256' '1e7237477c988974166d2e8ffa9a3c229dc5eb7fb857163ea4390e7572ea9e7c'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_190001-190912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_190001-190912.nc' 'SHA256' 'c8adde866c10fe2377e5c33c1ddc34835f0bd7a854dac307d5e8dc2f3f3f617d'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_191001-191912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_191001-191912.nc' 'SHA256' '0870ff7ee2a7f464a3fa07f2ce9aeded21efedc8388981dbdebafbbad79de348'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_192001-192912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_192001-192912.nc' 'SHA256' 'e91edd92dbfbd0d56b69e711c4da7511ea4c835d34e400558da651789e07f303'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_193001-193912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_193001-193912.nc' 'SHA256' 'e573584292092e7d2398cc0f89cfef12cb5a227deb80e042d7b6d37562c78b6a'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_194001-194912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_194001-194912.nc' 'SHA256' '8826183d2e17cb8fc9695f3e8ccbb1bd7561fdb5b664f936c2e093e43d8cdf20'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_195001-195912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_195001-195912.nc' 'SHA256' '55c977713587bb557a48854a5ecc0c82edfcddeb2fc4d27a90d80b30153bfbd3'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_196001-196912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_196001-196912.nc' 'SHA256' '8c0e52ac161c217312a7c66ac195a3423e264a05888d2ed49e519578ac07f629'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_197001-197912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_197001-197912.nc' 'SHA256' 'e8abe66f39930f4b610e38c8594ec0592e1060d1fa5e9e98d6116fd0c26b632b'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_198001-198912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_198001-198912.nc' 'SHA256' '3472544db5658e66ee26c8392692a5624f5db0acec8b380e8a84415810e25c61'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_199001-199912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_199001-199912.nc' 'SHA256' '3a41aa16954e61967a0878d943436a9369a2df30a896a3a5290eadf9de2b56a9'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_200001-200912.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_200001-200912.nc' 'SHA256' 'bf7c15862e6b131258fb858bd2034d5e6da54dd38afbb9701b0bd7fe49a6ca1b'
'tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_201001-201412.nc' 'http://noresg.nird.sigma2.no/thredds/fileServer/esg_dataroot/cmor/CMIP6/CMIP/NCC/NorESM2-MM/historical/r1i1p1f1/Omon/tos/gn/v20191108/tos_Omon_NorESM2-MM_historical_r1i1p1f1_gn_201001-201412.nc' 'SHA256' '0ae9557e7a84faaa9b2181b0f809780e5dc7c7062b87b24bc23401bc9c5db7b7'
'tos_Omon_CIESM_historical_r1i1p1f1_gn_185001-189912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r1i1p1f1_gn_185001-189912.nc' 'SHA256' '3b8246bbe602b558e7f938c7acabf20db397cefdaa594d2fbc6b16780c8f6bdb'
'tos_Omon_CIESM_historical_r1i1p1f1_gn_190001-194912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r1i1p1f1_gn_190001-194912.nc' 'SHA256' '7ec53d2613c5437326dbb3d37344a4f1dab4408ed314ac8b92d68474ad0df958'
'tos_Omon_CIESM_historical_r1i1p1f1_gn_195001-199912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r1i1p1f1_gn_195001-199912.nc' 'SHA256' '02631807b9163c9989318dc8544b65f8ed4ca59f5c1323c505c8c468a2968a83'
'tos_Omon_CIESM_historical_r1i1p1f1_gn_200001-201412.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r1i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r1i1p1f1_gn_200001-201412.nc' 'SHA256' '3cff942ceb6ee7ac98f1adf198098748c7610696cb263294d4078aff867abe2b'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 83 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
