#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/04/25 08:25:04
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.NCAR.CESM2-FV2.historical.r1i1p1f1.Omon.tos.gn.v20191120|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM-FV2.historical.r1i1p1f1.Omon.tos.gn.v20191120|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.CAS.FGOALS-f3-L.historical.r1i1p1f1.Omon.tos.gn.v20191007|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-0.historical.r1i1p1f1.Omon.tos.gr.v20190826|aims3.llnl.gov&dataset_id=CMIP6.CMIP.UA.MCM-UA-1-0.historical.r1i1p1f1.Omon.tos.gn.v20190731|esgf-data1.llnl.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM.historical.r1i1p1f1.Omon.tos.gn.v20190808|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NUIST.NESM3.historical.r1i1p1f1.Omon.tos.gn.v20190703|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.SNU.SAM0-UNICON.historical.r1i1p1f1.Omon.tos.gn.v20190323|dist.nmlab.snu.ac.kr&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.BCC.BCC-CSM2-MR.historical.r1i1p1f1.Omon.tos.gn.v20181126|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.NCAR.CESM2.historical.r1i1p1f1.Omon.tos.gn.v20190308|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.BCC.BCC-ESM1.historical.r1i1p1f1.Omon.tos.gn.v20181129|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-1.historical.r1i1p1f1.Omon.tos.gr.v20191204|aims3.llnl.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-G.historical.r1i1p1f1.Omon.tos.gn.v20180827|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-H.historical.r1i1p1f1.Omon.tos.gn.v20190403|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NIMS-KMA.KACE-1-0-G.historical.r1i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-1-ECA.historical.r1i1p1f1.Omon.tos.gr.v20200127|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.MRI.MRI-ESM2-0.historical.r1i1p1f1.Omon.tos.gn.v20190904|esgf-data03.diasjp.net&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-G.historical.r1i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.KIOST.KIOST-ESM.historical.r1i1p1f1.Omon.tos.gr1.v20220204|polaris.pknu.ac.kr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.NCAR.CESM2-FV2.historical.r1i1p1f1.Omon.tos.gn.v20191120|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM-FV2.historical.r1i1p1f1.Omon.tos.gn.v20191120|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.CAS.FGOALS-f3-L.historical.r1i1p1f1.Omon.tos.gn.v20191007|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-0.historical.r1i1p1f1.Omon.tos.gr.v20190826|aims3.llnl.gov&dataset_id=CMIP6.CMIP.UA.MCM-UA-1-0.historical.r1i1p1f1.Omon.tos.gn.v20190731|esgf-data1.llnl.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM.historical.r1i1p1f1.Omon.tos.gn.v20190808|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NUIST.NESM3.historical.r1i1p1f1.Omon.tos.gn.v20190703|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.SNU.SAM0-UNICON.historical.r1i1p1f1.Omon.tos.gn.v20190323|dist.nmlab.snu.ac.kr&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r1i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.BCC.BCC-CSM2-MR.historical.r1i1p1f1.Omon.tos.gn.v20181126|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.NCAR.CESM2.historical.r1i1p1f1.Omon.tos.gn.v20190308|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.BCC.BCC-ESM1.historical.r1i1p1f1.Omon.tos.gn.v20181129|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-1.historical.r1i1p1f1.Omon.tos.gr.v20191204|aims3.llnl.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-G.historical.r1i1p1f1.Omon.tos.gn.v20180827|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-H.historical.r1i1p1f1.Omon.tos.gn.v20190403|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NIMS-KMA.KACE-1-0-G.historical.r1i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-1-ECA.historical.r1i1p1f1.Omon.tos.gr.v20200127|esgf-data2.llnl.gov&dataset_id=CMIP6.CMIP.MRI.MRI-ESM2-0.historical.r1i1p1f1.Omon.tos.gn.v20190904|esgf-data03.diasjp.net&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-G.historical.r1i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.KIOST.KIOST-ESM.historical.r1i1p1f1.Omon.tos.gr1.v20220204|polaris.pknu.ac.kr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_BCC-CSM2-MR_historical_r1i1p1f1_gn_185001-201412.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/CMIP/BCC/BCC-CSM2-MR/historical/r1i1p1f1/Omon/tos/gn/v20181126/tos_Omon_BCC-CSM2-MR_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'c24444cadc6a27abf3be2cf3598200aad74d6e36d2c56be1df404320afdd731d'
'tos_Omon_BCC-ESM1_historical_r1i1p1f1_gn_185001-201412.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/CMIP/BCC/BCC-ESM1/historical/r1i1p1f1/Omon/tos/gn/v20181129/tos_Omon_BCC-ESM1_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '767732839b45224a7c8ff4d06a5be7297bc05ab8f43ecb12966520ab223f3856'
'tos_Omon_FGOALS-f3-L_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-f3-L/historical/r1i1p1f1/Omon/tos/gn/v20191007/tos_Omon_FGOALS-f3-L_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '277abbc78b57a62ccba8c7aaa00aa68a3b23252ebc3d349d0e5884f15c2e2c1c'
'tos_Omon_CanESM5_historical_r1i1p1f1_gn_185001-201412.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r1i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '00575e006b1a48fd10c7cfa2aa0bd5b23ba1ff5522dd5af1fe206206f1a2fa73'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_185001-185412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_185001-185412.nc' 'SHA256' 'a91858245e07ca83814393e38ad3dbb03ef419e199c4fe0eb8743c3f205155aa'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_185501-185912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_185501-185912.nc' 'SHA256' '1407274482122eb863ee643b08b484e198243823c165a30b88d5a1bb0de58c94'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_186001-186412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_186001-186412.nc' 'SHA256' '0414f6ed6de679f21f8a7845e24119caa9c892d88973474577720e10e85ae98e'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_186501-186912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_186501-186912.nc' 'SHA256' 'b4c0f71d9beda141265d85983eb3d89ff9a4db0c20b208f86b066801a817f53c'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_187001-187412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_187001-187412.nc' 'SHA256' '4f7cd114e41fd975a02d80b60da66b1471af002a4dc75a19a31207456f9abb53'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_187501-187912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_187501-187912.nc' 'SHA256' 'a179b9bb93dc9702bd81da0cb5732e5dbb1a5b41197be7ef29998b7f91f93544'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_188001-188412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_188001-188412.nc' 'SHA256' 'b82ec1b08c31c3853e740a752fa591881aa4cec4cba7924d2257bae84b68b629'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_188501-188912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_188501-188912.nc' 'SHA256' '36d18934a903c1af13cdbeace99ff9e2f7846becdd71b5b9e452d4f6fd4aaa4d'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_189001-189412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_189001-189412.nc' 'SHA256' 'ce7204a1d3d23f51212daf4e5a3661ee4d1af99fb5910ad14cd983ebd5d870ce'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_189501-189912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_189501-189912.nc' 'SHA256' 'fa6d90eb8dd8e1d4f97d1bff0559156bf3dfb70d10d3b6db151a2c07b657f690'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_190001-190412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_190001-190412.nc' 'SHA256' '25609d6f0505cfac09f3e03b138f4eec20636bcc0289cb04f7e29a3bd3126c84'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_190501-190912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_190501-190912.nc' 'SHA256' '1bb486731ad217820f8ba5e420ccd786588dd72b1a5444ec505cc6738bba212f'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_191001-191412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_191001-191412.nc' 'SHA256' 'a508787d20e3aa4b94955bca5e8610b0fa9e2a06c3941c70014f0a31660a3b31'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_191501-191912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_191501-191912.nc' 'SHA256' '592573577610632289a5905679fb40039110d00556033536a695103b26ee9fee'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_192001-192412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_192001-192412.nc' 'SHA256' '96791a7a0b0eca41908b7130ee70155c88068796746f7919522ca86d1d093745'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_192501-192912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_192501-192912.nc' 'SHA256' '93d3de52b920c17502ed6a5ea1af07b1456cdcbd3711a389084d64af850ff0b1'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_193001-193412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_193001-193412.nc' 'SHA256' '42876d8355677b1dd85832cb92f1d72507fac6151605d66ddbfca794ff7a3999'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_193501-193912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_193501-193912.nc' 'SHA256' '1338675d8a970b43a8a77892435f1c7258b2ff75af9e6c39bd3a6ce6b96d230a'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_194001-194412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_194001-194412.nc' 'SHA256' '05d82d9729fd64e27c36a66df2aa94aaca553a7a172de9c9faca258d1dbed70c'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_194501-194912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_194501-194912.nc' 'SHA256' 'a566419ed4ff72021a34942314e5e8ece006365b35aa07e18c25374a1aaf1cef'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_195001-195412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_195001-195412.nc' 'SHA256' '3aa863ebc10646ba559e5cece3ec2f247609047e98e6bb77d34898819165e7a9'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_195501-195912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_195501-195912.nc' 'SHA256' 'bf7790e0a3d861a63cf527132b3f1c04ad30873434d9cf4d5d3b14373fa73aff'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_196001-196412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_196001-196412.nc' 'SHA256' 'c4cea10453b5cfd8c13c38d822bee37fb4f976b5ae1db3cfe056109be4806d75'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_196501-196912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_196501-196912.nc' 'SHA256' '973b3b116e3756c92672c50244e7c0ead06ca0b07190281686b950890a2a402f'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_197001-197412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_197001-197412.nc' 'SHA256' '1532631aef0ec456af0e6e1b8686d00f8762944e897ed40111acb69e25607b60'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_197501-197912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_197501-197912.nc' 'SHA256' '60086092a0633c0531b8ca0bc0f1dd0e25da5ff26269cd73866373d0e218bd7e'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_198001-198412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_198001-198412.nc' 'SHA256' 'a7ccea474e67813af1e5ff6edf55d320896604e3beb8ff20a6a5ec86cede0454'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_198501-198912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_198501-198912.nc' 'SHA256' '98eb244aa64e6f391fbef01dae7f0cd1a79d89996cfb7a12ae341143a981ad84'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_199001-199412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_199001-199412.nc' 'SHA256' '18c03ef7dc0d105a0acf004195e75e5cb1a256b835e8ae1bee1774e02a1937cc'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_199501-199912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_199501-199912.nc' 'SHA256' '81ec09436b4e782697ad583ef7507dbeab09d7bfb2811601c9195fc4e79c9320'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_200001-200412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_200001-200412.nc' 'SHA256' '891050fc44370ff6c9316a4c85a60fc9fbd51a605503131594ddf76a13c8de15'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_200501-200912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_200501-200912.nc' 'SHA256' '0700ff7d0546a0c1545d1e748670f15f9d8f44c226469c3cfa66d20c8facefde'
'tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_201001-201412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r1i1p1f1/Omon/tos/gr/v20190826/tos_Omon_E3SM-1-0_historical_r1i1p1f1_gr_201001-201412.nc' 'SHA256' 'ce7d8543eb9abe2ee2b352ac777377a2cd9bb7627b732e40e360634507fc11e1'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_185001-185412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_185001-185412.nc' 'SHA256' '3587b7c85538520eac2b9e9a52bf326c6303c2343fe96c84344d5f396fa6b5dd'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_185501-185912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_185501-185912.nc' 'SHA256' '07c96d10f61e5dd2b463658d3942986565a1dc043522a6c49ee6926d73629fc6'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_186001-186412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_186001-186412.nc' 'SHA256' '9ff343e9dd688efb8593124a67f74c9d7c226761c5f42ec09db317b5f872569e'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_186501-186912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_186501-186912.nc' 'SHA256' 'fa4f0c7c3a2fb72a2fac2ca96a66c4425e2f13ebcb1f9ac3526e43923c429b57'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_187001-187412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_187001-187412.nc' 'SHA256' '46b1fe75d1173bfec4197a24b57f26eaf369eac629d1b810d77e9357f8049f7c'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_187501-187912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_187501-187912.nc' 'SHA256' '5d6bbcd5c23e08eac0a2e274ebd4627395647437267ced46bff92417caa1c552'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_188001-188412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_188001-188412.nc' 'SHA256' '2c5796d74c575af8f92aaa40fe940a17fd4594dd5483df945c33d7d218302088'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_188501-188912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_188501-188912.nc' 'SHA256' '514f373001b3f18bb30ee1faf5bc40ffe5aafb6a0e4d31546f449314dfcbb114'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_189001-189412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_189001-189412.nc' 'SHA256' 'e1c2a19130ce0ce990ec2f5dd8cea10603dc62dc735f2ff2ebb4e0af37a3b51f'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_189501-189912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_189501-189912.nc' 'SHA256' '5471d93a05f6978da5483a7a1e7b82b4e9e806b45ba6830a5ba87e10dcbd5c0c'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_190001-190412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_190001-190412.nc' 'SHA256' 'a7f68b38dfc75a83d4f73477773b6a106114ee82636174675b27bbf11ab13abf'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_190501-190912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_190501-190912.nc' 'SHA256' 'a8aeff7274b85a6874fe96679bca91ba2e1133ae3406307a4d76392ca1a29cb8'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_191001-191412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_191001-191412.nc' 'SHA256' '5710e110ecfdc7e1df8c55113c075c7d724a70039729607ec8cea90339faf3f9'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_191501-191912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_191501-191912.nc' 'SHA256' '0c30e2f7411a4510ec46e05bb61e7c24403d6bbeb7571cebceafe7464920d8c6'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_192001-192412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_192001-192412.nc' 'SHA256' '1b8bffe3e1c19679fd6647f5d3970fb03b055276d467fb0bb17354b78b03e1eb'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_192501-192912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_192501-192912.nc' 'SHA256' 'b77cd9318f4c67ca5d3eaf1af306259471413b72f6bc56c833cb837a1f137ff5'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_193001-193412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_193001-193412.nc' 'SHA256' '244b43c73bc1c3d69803ccfa42e499db3840bdd0f5283bf51d11734564489692'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_193501-193912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_193501-193912.nc' 'SHA256' '3e671baa3471ea8e7d5421b3536ce25b9cb471664507ca87ed89a91480887f5c'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_194001-194412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_194001-194412.nc' 'SHA256' 'cddb103a9da84e4bdccb1b6e6353f98c99a650f224f2b1f539abf3ec67f84ce6'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_194501-194912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_194501-194912.nc' 'SHA256' 'f99bd7b591d6cb2b8af95560c4b35e93bdbc2b594e1124fe872a5a1cd763be21'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_195001-195412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_195001-195412.nc' 'SHA256' '615ecebe5a219ffbb72eecc9a2f83c95e384cbec0cc0cc57e46e96e6443c5116'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_195501-195912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_195501-195912.nc' 'SHA256' '98f320250e65c6f9c75a73d4fb48801977d5d20c84d115fa15151a3d481b4649'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_196001-196412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_196001-196412.nc' 'SHA256' '20213fa4c3f81f6a174627277a3ae5b88e785b37ec24fa966b0907d237c4a470'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_196501-196912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_196501-196912.nc' 'SHA256' '642a9ddb3eb96841460359b3c9fce37996a609f60da56396246977cca5133663'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_197001-197412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_197001-197412.nc' 'SHA256' '47582a8640bc0719e23dc9c8713aa318696abe50affc0bc3e8ff991903554951'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_197501-197912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_197501-197912.nc' 'SHA256' 'adf5273f741c5f1c446a6fa48b2f387e54f5505b6e96efa83ab9f648e14a87dd'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_198001-198412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_198001-198412.nc' 'SHA256' '0c027588993acca08c87faff1c2bfe8a4992e42fd239bb41fbcda1010fbb602b'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_198501-198912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_198501-198912.nc' 'SHA256' 'ae79aed54f4451e4f5f34869b6d0db7c15d6517371598625d5055078a250ce18'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_199001-199412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_199001-199412.nc' 'SHA256' '1527a2a5bd42d49e4a2a230176591fa3c336705124b5d1b28376b390ceb93158'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_199501-199912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_199501-199912.nc' 'SHA256' '383049b846032f95e708250f54ca865e6fdc9d8bcdd31d8c5f0d2e6f7e28ed81'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_200001-200412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_200001-200412.nc' 'SHA256' '2c5d465f1846a60eb7f9d6bb7d9a0a1882dfc6f21efb2689cd70918b19f7e258'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_200501-200912.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_200501-200912.nc' 'SHA256' 'c4a572157e5ec14ec651cdbf94395c875c9977e7930a122f8b8b1efb008b1950'
'tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_201001-201412.nc' 'http://esgf-data2.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1-ECA/historical/r1i1p1f1/Omon/tos/gr/v20200127/tos_Omon_E3SM-1-1-ECA_historical_r1i1p1f1_gr_201001-201412.nc' 'SHA256' '6ca8952493745260ac2b147c382331278c2643e06079502681b6e91aec76728e'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_185001-185412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_185001-185412.nc' 'SHA256' 'ce38081d4dc2feab8ac0f1abbe6e76149aeb8665a1c2ec5cdf89173ec75bde3c'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_185501-185912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_185501-185912.nc' 'SHA256' '060c1d2b2de7edd97bd318a14d61bad66fd9aedb137bd9f56b374511e020974f'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_186001-186412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_186001-186412.nc' 'SHA256' '2b4dcdc5a6a7238c2c7098e05849ba35b5d0286fcda678dee265bb04b5a1bce9'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_186501-186912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_186501-186912.nc' 'SHA256' 'b625a162cec4cfa6bec206022e122d6e8c963cd5eefec6beaa498c0a675435d9'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_187001-187412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_187001-187412.nc' 'SHA256' 'f0cdfcfd9ac13c712e10d6bb7bc961ccc79ad8782a5e9fe7661472df3145fcd2'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_187501-187912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_187501-187912.nc' 'SHA256' '492d772b34a10cc43cfc507b156579cb993d98877bf378233098c7a3fd409832'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_188001-188412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_188001-188412.nc' 'SHA256' '94c972252ffd1ee00b3ce5335e10e5d4f55c0a5f887d64107e662375a999c3aa'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_188501-188912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_188501-188912.nc' 'SHA256' '668880739a3cdc529bad6fb797ae7b8aff2d23d2cf61fcead1f2e0439c5f531d'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_189001-189412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_189001-189412.nc' 'SHA256' '721853045fad3a62d9e964964aab476a7e51a5d6794b06f2f837705178719715'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_189501-189912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_189501-189912.nc' 'SHA256' 'b70d385a66d05cb9683ab27186cdcc33e3f793d5abbfba2bf42bf16ea032a2fe'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_190001-190412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_190001-190412.nc' 'SHA256' '9a6161e12a72f8b364fad17689ca5321b677628465a675897468b6c9f93917ef'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_190501-190912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_190501-190912.nc' 'SHA256' '508f7323cf38607c5677ca5222cb6608513923741344e30a57f18eeb767cc5bb'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_191001-191412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_191001-191412.nc' 'SHA256' 'a66dd689c5a4552b9ccfb353e9db9cbb6e7155b17d8e529e273c95a74aac47ff'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_191501-191912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_191501-191912.nc' 'SHA256' '3d934274a24569cdb27123d921cb6e7dce4dcd992e32711c521116d14455989c'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_192001-192412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_192001-192412.nc' 'SHA256' '36ddff3ed3ab7c13408fb99608470f5cd4343f36901ecdca167a2969581fd898'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_192501-192912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_192501-192912.nc' 'SHA256' '49105ac3631ed99bbb5f4562789f7912050bbd6be2f7a3147233deecb6d843f0'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_193001-193412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_193001-193412.nc' 'SHA256' '3ec3f7f1bb47b26bf6475676f62b0cc71be9fdc9f8252f4acb159e6d22ff1205'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_193501-193912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_193501-193912.nc' 'SHA256' '9db9a6191f323a00ef65245ccfd41d8b52927c05a5c53af945bca845acbe9c89'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_194001-194412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_194001-194412.nc' 'SHA256' '1e444e25174647d41e70f060a632f85dbbe98cbcf463746656bdee0bb0e45ca8'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_194501-194912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_194501-194912.nc' 'SHA256' 'dc522b29253f187247663d413cee1d08e189b191de2535d18ca5145a021738ae'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_195001-195412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_195001-195412.nc' 'SHA256' '278c2e4ffc65b2895e54277e5038a08bbb9a592ef6ca19a8389899598feeab37'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_195501-195912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_195501-195912.nc' 'SHA256' '332457ca60f235360a0f1a3cbf594dddeca294594af26b0552e496935d9d8630'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_196001-196412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_196001-196412.nc' 'SHA256' '8c22b947d57ed97016d1d0e967143920d015d96c843bf6802f14c2170475db5c'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_196501-196912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_196501-196912.nc' 'SHA256' '1471a899f9180e02b54dd1bb3a41adddfe1c5e52f639fcb0487cd4b760f5efe9'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_197001-197412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_197001-197412.nc' 'SHA256' '53ebd6c406addf3726b4e265bf2e5406a38f7fa12470e4050780ca78dfe63b28'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_197501-197912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_197501-197912.nc' 'SHA256' '49f4efddec6e3473eeb4d03681fda53a545060e9f89bbc5ee82f47d348d60b9e'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_198001-198412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_198001-198412.nc' 'SHA256' 'd0a4d9b9d8772cc75ceca1f06c2f3c21274b9147a396181a9c1fdceae4193bbd'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_198501-198912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_198501-198912.nc' 'SHA256' '68dea59316cc7237250a49c969818adc185db1a9de0650110761714e1af9818f'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_199001-199412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_199001-199412.nc' 'SHA256' '939020a549f157ef5225a4f206c2d7b4b16fc8769e5068e3a884c2cf8433867e'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_199501-199912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_199501-199912.nc' 'SHA256' '775296f074ecd60a40d372db767a535bc6de2e6c9a85d5eb83c22c211c3e0d15'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_200001-200412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_200001-200412.nc' 'SHA256' '9cb7c3b553e424eb6db7029079bfa9b200cf3897dae923f81c4d305f1cb6031a'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_200501-200912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_200501-200912.nc' 'SHA256' '76504b1ac29df940ab17b2d1853f2efb5a558fee9a93b419719145dfa9bac72a'
'tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_201001-201412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-1/historical/r1i1p1f1/Omon/tos/gr/v20191204/tos_Omon_E3SM-1-1_historical_r1i1p1f1_gr_201001-201412.nc' 'SHA256' '2f5619385b2e77d18f762166a9341529c95a0da512568abd59218a3b953c43e4'
'tos_Omon_KIOST-ESM_historical_r1i1p1f1_gr1_185001-201412.nc' 'http://polaris.pknu.ac.kr/thredds/fileServer/cmip6/CMIP6/CMIP/KIOST/KIOST-ESM/historical/r1i1p1f1/Omon/tos/gr1/v20220204/tos_Omon_KIOST-ESM_historical_r1i1p1f1_gr1_185001-201412.nc' 'SHA256' 'de400b8f0b5872c1f556e6e2c8fa07d7d32a71cdcf3aa41d8cb73ebe88d30de9'
'tos_Omon_MRI-ESM2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MRI/MRI-ESM2-0/historical/r1i1p1f1/Omon/tos/gn/v20190904/tos_Omon_MRI-ESM2-0_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '1d32f35ffbb3e6b110b5fe929b39819b91614279d0d2b675d467ad96139c3b73'
'tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_185001-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r1i1p1f1/Omon/tos/gn/v20180827/tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_185001-190012.nc' 'SHA256' 'fe66d9ad3840f7468f3487c4e1f87983f81cba6e46d76a05286e35a72748b24d'
'tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_190101-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r1i1p1f1/Omon/tos/gn/v20180827/tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_190101-195012.nc' 'SHA256' '4207b4d5604beed3c6cb09826ab374bc10b802f66f91f980983431ec79f0f4b4'
'tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_195101-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r1i1p1f1/Omon/tos/gn/v20180827/tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_195101-200012.nc' 'SHA256' '8ea2bf76304e854d199bcd2236477876b78542c12f6f1c31436140d671ee90a5'
'tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r1i1p1f1/Omon/tos/gn/v20180827/tos_Omon_GISS-E2-1-G_historical_r1i1p1f1_gn_200101-201412.nc' 'SHA256' '376a87af38c3607b941e9eb8a6d88d29b96847a63c7b1dcb9560e5bdd7e4e2d9'
'tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_185001-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r1i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_185001-190012.nc' 'SHA256' '714741dfa5ab58b8d721e56bb68fce35345bad09c8106935ff998e4a1b97247b'
'tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_190101-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r1i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_190101-195012.nc' 'SHA256' '264a00ee31aa0593cecfdfee1c9c10fb297534d9a4f85961f48023b13274011a'
'tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_195101-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r1i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_195101-200012.nc' 'SHA256' 'a94ce6bfaebcf6a7025017b395ab272a8dbf13abbdfcb1c98a055e78c556aad6'
'tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r1i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r1i1p1f1_gn_200101-201412.nc' 'SHA256' 'cb618756ae7fb55371a1bf7c4aa1dd5d2369cbce8c610d79cdf7c7fd69b962d5'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_185001-187512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_185001-187512.nc' 'SHA256' 'cefc04168a686f37bd52cf3683ae6ae99689f315dee9abce1b9df503397af8fc'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_187601-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_187601-190012.nc' 'SHA256' 'd0fa796ea883dff69eca6c11e29957e59c9663332f2c1880017dc8595425e2e9'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_190101-192512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_190101-192512.nc' 'SHA256' 'b15fe52eccf6cea7cb1120cc8898da411dfee9fb108960b4077c2fb5adab6d25'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_192601-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_192601-195012.nc' 'SHA256' 'e42520c83b64ab546457a017d7b4bd953a49ae43c4d2e6d3480f4704498b2d45'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_195101-197512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_195101-197512.nc' 'SHA256' '0c300c441040f03b471baa7b27cad74ab200c5e342add430f46d44a885048337'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_197601-199012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_197601-199012.nc' 'SHA256' 'c5f21ba044312d0fa30141072c57a2e2f7d92be899c31a5be76d6b5164c30071'
'tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_199101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r1i1p1f1_gn_199101-201412.nc' 'SHA256' '76233c1cf32b29c29abca2d969372a9e3167534f4c6789f107276479a620c3b5'
'tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_185001-189912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_185001-189912.nc' 'SHA256' 'ba610c408ac13c66c121382d1c9e21f0fd96d8d3bb4e4f3da3c75e1ddec631ca'
'tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_190001-194912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_190001-194912.nc' 'SHA256' '8b7f6df3daa9e4cbe9330446c911764fbd575a516c6e7bd3b6575d4deea2e5ec'
'tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_195001-199912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_195001-199912.nc' 'SHA256' 'b9765b304561e37302b7fffa1e596652be461ddaf9f8a04f5c079471fdc29c3a'
'tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_200001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-FV2_historical_r1i1p1f1_gn_200001-201412.nc' 'SHA256' '00b00a5e1cb7d36083039f92cd43ee6e3351c9e49f4962bef7566e2e994ec14f'
'tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_185001-189912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_185001-189912.nc' 'SHA256' '1042d2fcad3c972a63b77b7964d42d64472a3fe4f7b935ffbb68bd01109e09c2'
'tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_190001-194912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_190001-194912.nc' 'SHA256' 'de90cadefe4d91618126e2743e81888d79d9111907d152232947152c5ce8e667'
'tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_195001-199912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_195001-199912.nc' 'SHA256' 'd072ae028e8e72bbaac95637b78080680c04db1f4c993c46f4bb00dea5ef3364'
'tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_200001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r1i1p1f1/Omon/tos/gn/v20191120/tos_Omon_CESM2-WACCM-FV2_historical_r1i1p1f1_gn_200001-201412.nc' 'SHA256' '8fc7f4cd11882990faa8c0935112b18ebae3b6442ec881aff7dbf10ef2774c51'
'tos_Omon_CESM2-WACCM_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM/historical/r1i1p1f1/Omon/tos/gn/v20190808/tos_Omon_CESM2-WACCM_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '454cd8f073d7a2d25b0650f07561bc01d8608d9a7fdd0925f4e92a9444c6c6b0'
'tos_Omon_CESM2_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2/historical/r1i1p1f1/Omon/tos/gn/v20190308/tos_Omon_CESM2_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '17565e83367f01a2135a0170e9ab4530b34baca0fa72d36c5f77fe9841e3f347'
'tos_Omon_KACE-1-0-G_historical_r1i1p1f1_gr_185001-201412.nc' 'http://esgf-nimscmip6.apcc21.org/thredds/fileServer/my_cmip6_dataroot/Historical/R1/aa008o-Omon/CMIP6/CMIP/NIMS-KMA/KACE-1-0-G/historical/r1i1p1f1/Omon/tos/gr/v20200130/tos_Omon_KACE-1-0-G_historical_r1i1p1f1_gr_185001-201412.nc' 'SHA256' '5fcb9a0128336cc13883e09fc14293c40c16be2af56ab47c7c59c53b1b2ba96c'
'tos_Omon_NESM3_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NUIST/NESM3/historical/r1i1p1f1/Omon/tos/gn/v20190703/tos_Omon_NESM3_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' '18b8052788bd18ad0e7dd3a4f2de69cd4d789c57d4d8e87376f816d4f8fe3535'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_185001-185912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_185001-185912.nc' 'SHA256' '5bd38d6914b3b14443fb664ed94108a59f34acef8de3dfbfb32d341878825b26'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_186001-186912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_186001-186912.nc' 'SHA256' 'dbd97d6b0433923adf8d14ec66a4be6fb17e4f2ebfded08f44b3bcbcf20327a4'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_187001-187912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_187001-187912.nc' 'SHA256' 'af52e4b8fa5e9672d0c8b4b5542a6b323ee61956283bb9ec9cd30af831d96a66'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_188001-188912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_188001-188912.nc' 'SHA256' 'cafe8930d236014ee772280de14fdcfa8a571e30931293b7cbfc41d4a9ea27d5'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_189001-189912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_189001-189912.nc' 'SHA256' '1a3d313c8bb6c073d2527f608592d8e8cb287be15fdf5f52b3738d6bae6c2876'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_190001-190912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_190001-190912.nc' 'SHA256' '89197bac13ea4fd8975de2c60e86209c2de106002e221ee1f1518aebeec1f7af'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_191001-191912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_191001-191912.nc' 'SHA256' '44417dbbfc1c88f327c62e9fe378b29bdf8dbf4914aebeb9f6ec0afccc7d1a51'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_192001-192912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_192001-192912.nc' 'SHA256' '647fc13e08b75a32c2e4ea9476d9233e8c5b6bda836a339cf20b1ff6513ae651'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_193001-193912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_193001-193912.nc' 'SHA256' '659558f66930e7580f3288631b3aba6cc1e912c1630538f6ff672549555aee0a'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_194001-194912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_194001-194912.nc' 'SHA256' 'e38785aa32babc45e153b30717e1524d15af0ed6b156d856424f2f213236db39'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_195001-195912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_195001-195912.nc' 'SHA256' '83637b3ac7a119d6ac204eaf907b0d5fee632a60bead82e13358dcef541005a0'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_196001-196912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_196001-196912.nc' 'SHA256' '8f22d935fcbc660132cd8a06bb280be30bbefdb607996b20b0b66068630dc9a3'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_197001-197912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_197001-197912.nc' 'SHA256' 'b60adaae2ea7c916f0852a60bef97d39cb16a9c629fe1b7b40053c7a61699ec2'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_198001-198912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_198001-198912.nc' 'SHA256' 'ce38f63ef7b8de06dab46b4c714cd88be2d3e488546c2d15a79891521d6695a9'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_199001-199912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_199001-199912.nc' 'SHA256' '1166fd09303ea3269cc2a87c15887e52e5a2042d6654f6563d7f3d76ccea0a8a'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_200001-200912.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_200001-200912.nc' 'SHA256' '75e8c9047df98b50ba27c3ef05de06c2567bc512f3ad9be1da58e450e1bf6af4'
'tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_201001-201412.nc' 'http://dist.nmlab.snu.ac.kr/thredds/fileServer/my_cmip6_dataroot/CMIP6/CMIP/SNU/SAM0-UNICON/historical/r1i1p1f1/Omon/tos/gn/v20190323/tos_Omon_SAM0-UNICON_historical_r1i1p1f1_gn_201001-201412.nc' 'SHA256' '5f40c9de4eed3b9310997fd309cb8bc7d97e205351dbafc50ee6586c70353296'
'tos_Omon_MCM-UA-1-0_historical_r1i1p1f1_gn_185001-201412.nc' 'http://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/CMIP/UA/MCM-UA-1-0/historical/r1i1p1f1/Omon/tos/gn/v20190731/tos_Omon_MCM-UA-1-0_historical_r1i1p1f1_gn_185001-201412.nc' 'SHA256' 'ad4b0649877c61b91e2fb5bc1d2691e7f1997820df66b2af235c6539595d1123'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 150 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
