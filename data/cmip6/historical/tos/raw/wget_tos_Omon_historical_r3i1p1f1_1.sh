#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2023/05/02 07:22:30
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-f3-L.historical.r3i1p1f1.Omon.tos.gn.v20191008|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-0.historical.r3i1p1f1.Omon.tos.gr.v20190827|aims3.llnl.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM.historical.r3i1p1f1.Omon.tos.gn.v20190808|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NUIST.NESM3.historical.r3i1p1f1.Omon.tos.gn.v20190703|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.BCC.BCC-CSM2-MR.historical.r3i1p1f1.Omon.tos.gn.v20181102|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r3i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.NCAR.CESM2.historical.r3i1p1f1.Omon.tos.gn.v20190308|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.BCC.BCC-ESM1.historical.r3i1p1f1.Omon.tos.gn.v20181218|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-G.historical.r3i1p1f1.Omon.tos.gn.v20180828|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-H.historical.r3i1p1f1.Omon.tos.gn.v20190403|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM-FV2.historical.r3i1p1f1.Omon.tos.gn.v20200226|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NCAR.CESM2-FV2.historical.r3i1p1f1.Omon.tos.gn.v20200226|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NIMS-KMA.KACE-1-0-G.historical.r3i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.CMIP.NOAA-GFDL.GFDL-ESM4.historical.r3i1p1f1.Omon.tos.gr.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-G.historical.r3i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.MIROC.MIROC6.historical.r3i1p1f1.Omon.tos.gn.v20181212|esgf-data02.diasjp.net&dataset_id=CMIP6.CMIP.THU.CIESM.historical.r3i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-H.historical.r3i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.CAS.CAS-ESM2-0.historical.r3i1p1f1.Omon.tos.gn.v20201229|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.MRI.MRI-ESM2-0.historical.r3i1p1f1.Omon.tos.gn.v20190904|esgf-data03.diasjp.net
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.CMIP.CAS.FGOALS-f3-L.historical.r3i1p1f1.Omon.tos.gn.v20191008|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.E3SM-Project.E3SM-1-0.historical.r3i1p1f1.Omon.tos.gr.v20190827|aims3.llnl.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM.historical.r3i1p1f1.Omon.tos.gn.v20190808|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NUIST.NESM3.historical.r3i1p1f1.Omon.tos.gn.v20190703|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.BCC.BCC-CSM2-MR.historical.r3i1p1f1.Omon.tos.gn.v20181102|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r3i1p1f1.Omon.tos.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.NCAR.CESM2.historical.r3i1p1f1.Omon.tos.gn.v20190308|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.BCC.BCC-ESM1.historical.r3i1p1f1.Omon.tos.gn.v20181218|cmip.bcc.cma.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-G.historical.r3i1p1f1.Omon.tos.gn.v20180828|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-1-H.historical.r3i1p1f1.Omon.tos.gn.v20190403|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.NCAR.CESM2-WACCM-FV2.historical.r3i1p1f1.Omon.tos.gn.v20200226|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NCAR.CESM2-FV2.historical.r3i1p1f1.Omon.tos.gn.v20200226|esgf-data.ucar.edu&dataset_id=CMIP6.CMIP.NIMS-KMA.KACE-1-0-G.historical.r3i1p1f1.Omon.tos.gr.v20200130|esgf-nimscmip6.apcc21.org&dataset_id=CMIP6.CMIP.NOAA-GFDL.GFDL-ESM4.historical.r3i1p1f1.Omon.tos.gr.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-G.historical.r3i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.MIROC.MIROC6.historical.r3i1p1f1.Omon.tos.gn.v20181212|esgf-data02.diasjp.net&dataset_id=CMIP6.CMIP.THU.CIESM.historical.r3i1p1f1.Omon.tos.gn.v20200220|cmip.dess.tsinghua.edu.cn&dataset_id=CMIP6.CMIP.NASA-GISS.GISS-E2-2-H.historical.r3i1p1f1.Omon.tos.gn.v20191120|dpesgf03.nccs.nasa.gov&dataset_id=CMIP6.CMIP.CAS.CAS-ESM2-0.historical.r3i1p1f1.Omon.tos.gn.v20201229|esg.lasg.ac.cn&dataset_id=CMIP6.CMIP.MRI.MRI-ESM2-0.historical.r3i1p1f1.Omon.tos.gn.v20190904|esgf-data03.diasjp.net'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_BCC-CSM2-MR_historical_r3i1p1f1_gn_185001-201412.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/CMIP/BCC/BCC-CSM2-MR/historical/r3i1p1f1/Omon/tos/gn/v20181102/tos_Omon_BCC-CSM2-MR_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'db09171ef408707df282d88b302ec22b08d9fbeaa7910ef2e15b8a71d2804379'
'tos_Omon_BCC-ESM1_historical_r3i1p1f1_gn_185001-201412.nc' 'http://cmip.bcc.cma.cn/thredds/fileServer/cmip6_data/CMIP/BCC/BCC-ESM1/historical/r3i1p1f1/Omon/tos/gn/v20181218/tos_Omon_BCC-ESM1_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'eb753d433bdfa2aab206dac7298e9ff0340af2413f822ee1a2b7d852279d4f17'
'tos_Omon_CAS-ESM2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'https://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/CAS-ESM2-0/historical/r3i1p1f1/Omon/tos/gn/v20201229/tos_Omon_CAS-ESM2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'c4f0f1c06e3c2ef82b32277f34eff8015b82414ae4fe5dd3e5a0d7ac44abd956'
'tos_Omon_FGOALS-f3-L_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/CAS/FGOALS-f3-L/historical/r3i1p1f1/Omon/tos/gn/v20191008/tos_Omon_FGOALS-f3-L_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '3ac5c90655278be9d5e9261f20f084cdbfdf14ff7fce22303176252a2faee60e'
'tos_Omon_CanESM5_historical_r3i1p1f1_gn_185001-201412.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r3i1p1f1/Omon/tos/gn/v20190429/tos_Omon_CanESM5_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '1b946564044065846f1105c96437a54bf3d5276e2e3ee1f8c47f4df9e50ed74d'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_185001-185412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_185001-185412.nc' 'SHA256' 'bd7c129a6d555d50b3e48d317bd2976128d3a1332326dac605ec11dce36bdab2'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_185501-185912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_185501-185912.nc' 'SHA256' '6db8adcc7c5100e70542e8ab1b97d8914b16257a707a1bca2b02ee6e61380936'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_186001-186412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_186001-186412.nc' 'SHA256' 'da40aa2981d32b734fe2044b2dd76727cd6ae1a75ed13d39cb242be2f9c199bb'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_186501-186912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_186501-186912.nc' 'SHA256' '6570404e18bd422bce71637f4b4be90f39ecbf2232ec498be6539ea0e8019332'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_187001-187412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_187001-187412.nc' 'SHA256' '597c910814efeadfccfb0d79884f6f55eedeb076cc1cbbc9276f5deecff3b843'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_187501-187912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_187501-187912.nc' 'SHA256' '2dd5fb17cba48afd2f683a7ae449faff1d927e7665409c9065e0fa25259528fd'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_188001-188412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_188001-188412.nc' 'SHA256' '587485e9273f86c37202d91bbccf76bb0c82205c89f9403d95607793ff8e0245'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_188501-188912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_188501-188912.nc' 'SHA256' '1775e3fe18f02f2289326822a7470f57875ca2b33921f61c7a01b23cdfdd614f'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_189001-189412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_189001-189412.nc' 'SHA256' '0316a2d8c67f0b90dc54444e1de009274f710deefe5f33b071617ea4707d1f7d'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_189501-189912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_189501-189912.nc' 'SHA256' '7cff2a4cca48a95f60d37efee04dcbd1062652092d818002cb538ff981f730d4'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_190001-190412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_190001-190412.nc' 'SHA256' '54a5236ec72f6c9bb680535b1b2df863013fd6f0d79f553f8c00b8b83dfd7ff1'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_190501-190912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_190501-190912.nc' 'SHA256' '56b3f27434d02c67b557820f6e5b86de3896d073b45f5a451544460dba3ebf42'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_191001-191412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_191001-191412.nc' 'SHA256' '1d560baf2ec94a9decd88c41342613a3b4d25eecf45c3f61c8e9177afccce0d9'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_191501-191912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_191501-191912.nc' 'SHA256' 'bcbc073ad98e3ea1e1c6b1052735ef0251eaa60278aad9ebd3de179ad343e176'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_192001-192412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_192001-192412.nc' 'SHA256' '270c4cf5a3d0b390d96000b765969aeee5bb6381b96eddc8160c4e15c7e28d5d'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_192501-192912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_192501-192912.nc' 'SHA256' 'dd1db871e2c4d70dbd68c309ca8a635664851ceb7a3f77c491ef25d38ff37eee'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_193001-193412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_193001-193412.nc' 'SHA256' '9934e0464abc31c6c7ab4e712e8e8829741668e3f57aeb6bf9901210ca672a95'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_193501-193912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_193501-193912.nc' 'SHA256' 'a704e80684f9eb1eeaeaf7de50d3b83b7c686aa29bbfe218314b201cb4d5043a'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_194001-194412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_194001-194412.nc' 'SHA256' '06b6f29fcfbe2f1e939ab7cf8bc5f553f037f3d550b18b0260a553864401fc00'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_194501-194912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_194501-194912.nc' 'SHA256' '1eda3abee57350bd575ef778ee395bcbf4f6f36494c2c727b6e33b303ec6fa5e'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_195001-195412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_195001-195412.nc' 'SHA256' 'fceb15fcc2bbd8854bd9e2bb4d3b422e3ffa5e04ad8f954d05be2b51b2634d22'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_195501-195912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_195501-195912.nc' 'SHA256' '43e353323a4f48dded6a1e67bc1538ab1b06ee29b216ad863449964ca209d44d'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_196001-196412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_196001-196412.nc' 'SHA256' '9babd54b1c5833fe59e5bf2f8b8f713a8bb4687d9d90556c7448d0be310a358c'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_196501-196912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_196501-196912.nc' 'SHA256' '059d73c5815c70ac8fbb3aaed2be872fe343f78f95856f654b38c0941d5d09cf'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_197001-197412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_197001-197412.nc' 'SHA256' '5891d6434ce2f9ec26a23718b112d83020db77ae09a52be1630eea013fefa7fb'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_197501-197912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_197501-197912.nc' 'SHA256' '3d8731fc57eb6bf15dd3c1fff3de117fe4544cfc855f067726afb42737d9858c'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_198001-198412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_198001-198412.nc' 'SHA256' '801467aa50ad168c6dd1b05bbd925aa6904907f5d70d15ba5f86fa5763a42bb3'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_198501-198912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_198501-198912.nc' 'SHA256' 'dab0341a271c9ca419e5f2cbdac6623ed76ce365e7a9099a1c21378074b3d9e2'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_199001-199412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_199001-199412.nc' 'SHA256' '960f052cc96314ff8bdde6982ad046f0b1cd08ea7d854b20b826b5d5b4b10622'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_199501-199912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_199501-199912.nc' 'SHA256' 'dd3b86eb20478ed62cbee3485d42775773f75bd2d9340aa53fe6e606d27813fb'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_200001-200412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_200001-200412.nc' 'SHA256' '7ab36c1ceea2a8c52ece6e0c166aa1b2c6ffb791414c24dee13170d299f3ba7d'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_200501-200912.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_200501-200912.nc' 'SHA256' 'c434126f83a4a66a1b36b72fba0f83342b209f5dc90f159f3e38e2d7f675b778'
'tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_201001-201412.nc' 'http://aims3.llnl.gov/thredds/fileServer/user_pub_work/CMIP6/CMIP/E3SM-Project/E3SM-1-0/historical/r3i1p1f1/Omon/tos/gr/v20190827/tos_Omon_E3SM-1-0_historical_r3i1p1f1_gr_201001-201412.nc' 'SHA256' 'e6255c02d4be0560f212eef16d73f4eee7cb9f898b0d970b96aa70cad3a3556f'
'tos_Omon_MIROC6_historical_r3i1p1f1_gn_185001-194912.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MIROC/MIROC6/historical/r3i1p1f1/Omon/tos/gn/v20181212/tos_Omon_MIROC6_historical_r3i1p1f1_gn_185001-194912.nc' 'SHA256' '61d97f876036d74ace09252be0a5e534bc8173ec28bd32fcc81b03635c20a503'
'tos_Omon_MIROC6_historical_r3i1p1f1_gn_195001-201412.nc' 'http://esgf-data02.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MIROC/MIROC6/historical/r3i1p1f1/Omon/tos/gn/v20181212/tos_Omon_MIROC6_historical_r3i1p1f1_gn_195001-201412.nc' 'SHA256' '0adfc4a3daf11a0157010181e680463f03de0e6924775b6857c3168d5fbd85a5'
'tos_Omon_MRI-ESM2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esgf-data03.diasjp.net/thredds/fileServer/esg_dataroot/CMIP6/CMIP/MRI/MRI-ESM2-0/historical/r3i1p1f1/Omon/tos/gn/v20190904/tos_Omon_MRI-ESM2-0_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'a7a820d23217f4adfeb05c7db025ccd10373c9a2ba4aafd7105580b48c70a6ef'
'tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_185001-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r3i1p1f1/Omon/tos/gn/v20180828/tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_185001-190012.nc' 'SHA256' '1eac61403aeb052a915489500d5d3b71ab23ee34f53cc929ac63e771ca87a20d'
'tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_190101-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r3i1p1f1/Omon/tos/gn/v20180828/tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_190101-195012.nc' 'SHA256' '06bfea32570f0bb38dc8d525aa21f7e8f4bc7f75988c7bf7fd10b0112228f644'
'tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_195101-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r3i1p1f1/Omon/tos/gn/v20180828/tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_195101-200012.nc' 'SHA256' 'cb5b2851a2c4caec9c99338387e29134818e4ef205004173d2a77c16de849bde'
'tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-G/historical/r3i1p1f1/Omon/tos/gn/v20180828/tos_Omon_GISS-E2-1-G_historical_r3i1p1f1_gn_200101-201412.nc' 'SHA256' '67755afb56189d72f8dacb33df71d64730c14b8fedc20605c37e645d10473d38'
'tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_185001-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r3i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_185001-190012.nc' 'SHA256' '82a2922177432fc4f446460648430f09144f17bfa8fe26c28bad60bae5f1721d'
'tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_190101-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r3i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_190101-195012.nc' 'SHA256' '15e6b3a2b78a089b35493f9d0163d422aea078ff07f64887ead6f2fdb59158b8'
'tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_195101-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r3i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_195101-200012.nc' 'SHA256' 'f9e732cded58f956e33bd86bc4c09be55966dec0987d0a4b4118c7fd1b212403'
'tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-1-H/historical/r3i1p1f1/Omon/tos/gn/v20190403/tos_Omon_GISS-E2-1-H_historical_r3i1p1f1_gn_200101-201412.nc' 'SHA256' '502c3ab5b6eb08d84444bcdd65826023c6899670bf82286ece62fd674f0a57fc'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_185001-187512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_185001-187512.nc' 'SHA256' '9b982e53894bb7d40dc1271c295e91c572a6c37f541ef1fc101161f43b45850d'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_187601-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_187601-190012.nc' 'SHA256' '8bde17499bd9e7732aebd583183922b943dc9cd234fbbab8b4413a157aeed48e'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_190101-192512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_190101-192512.nc' 'SHA256' 'a8358d3b742ffa3c5cfb4035dc6b32a0f8b1010bc9f519b9095089fdcb457dbf'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_192601-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_192601-195012.nc' 'SHA256' 'b395f294e6bafeb6e4b414ecacd6310f585329027d99793eb61599eb823b1fa9'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_195101-197512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_195101-197512.nc' 'SHA256' '3d2ff125bcb98eb55622f15d3770ba8ca99b4bd9e691352a70bee15823e2c320'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_197601-199012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_197601-199012.nc' 'SHA256' 'fc2701ccac2fa5540794134a11d37f0c5b3572f902b875eba94fdd5a5345e7d0'
'tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_199101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-G/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-G_historical_r3i1p1f1_gn_199101-201412.nc' 'SHA256' '5b67446bf0feace02a84f011fae184731081f714810dd589b1d2a59b867222cf'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_185001-187512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_185001-187512.nc' 'SHA256' '13b2033b128853ffad98286c9923d439272c9fbd5fe8d7d4806d0f017f38b865'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_187601-190012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_187601-190012.nc' 'SHA256' '09c8ca7843c6f65396d434784d080d0d6ac5fde5aa4f75e2ec30899fb033a863'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_190101-192512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_190101-192512.nc' 'SHA256' '94fdedb7a0cb4ad916a63f419cfc0083d30616ed0164f199fce10c2bd37071a5'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_192601-195012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_192601-195012.nc' 'SHA256' '0e2c0cbb3b8d7d731f8c91fb5a9f783e1d88b9c7d7580aeaaace0c3782d774c9'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_195101-197512.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_195101-197512.nc' 'SHA256' '564098989ce36479ff00caf17d8e4ee82d045317b9cc353fa71f6813fbb6fb35'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_197601-200012.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_197601-200012.nc' 'SHA256' 'a052a4425098958f5b5dbf845deb5b9471cecd20e10ef0011d3784351036d0c7'
'tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_200101-201412.nc' 'https://dpesgf03.nccs.nasa.gov/thredds/fileServer/CMIP6/CMIP/NASA-GISS/GISS-E2-2-H/historical/r3i1p1f1/Omon/tos/gn/v20191120/tos_Omon_GISS-E2-2-H_historical_r3i1p1f1_gn_200101-201412.nc' 'SHA256' '9b4645e0952e24d5e352a6f45b92163410ac5d2d9c55b9e06441d9fc040b10d8'
'tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_185001-189912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_185001-189912.nc' 'SHA256' 'ea338feb32426298995907ff1cbed5193c040e9984e6602e16ff98da87209253'
'tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_190001-194912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_190001-194912.nc' 'SHA256' '8cd3a1c89a125ab1abad3993feafd0164f71b03691cce69d4f4245a4289a9531'
'tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_195001-199912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_195001-199912.nc' 'SHA256' '9c5620bebc1cd795451b1fe2c77cefd900aa6f8fe49b837a9c3740d58b79641f'
'tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_200001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-FV2_historical_r3i1p1f1_gn_200001-201412.nc' 'SHA256' '998fdd6552b081ace3892596de756c98c334c39b151afc307bf9eef4d51023c6'
'tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_185001-189912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_185001-189912.nc' 'SHA256' '5bf489a6f02fab3d2dd95e5033bed53a4dfb0c873b27bd66ba6315b87cd76be9'
'tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_190001-194912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_190001-194912.nc' 'SHA256' 'ab2fe887210e7c6ec94ba8f69a70333788290cda4d51b0fcb971d13490c68881'
'tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_195001-199912.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_195001-199912.nc' 'SHA256' '0c7d180d3140255a527b46289f171d1839cfd7083904d4361058505a3c5c0eb3'
'tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_200001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM-FV2/historical/r3i1p1f1/Omon/tos/gn/v20200226/tos_Omon_CESM2-WACCM-FV2_historical_r3i1p1f1_gn_200001-201412.nc' 'SHA256' '9ce4666d9c2834e9b3a8c8de1662bc2ee7f5af36f8074f52ef30887b24353ce4'
'tos_Omon_CESM2-WACCM_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2-WACCM/historical/r3i1p1f1/Omon/tos/gn/v20190808/tos_Omon_CESM2-WACCM_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '98f44cc44a3792db3dded5df21fa06a62a21eec0498652a040a3e17702c8cdef'
'tos_Omon_CESM2_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esgf-data.ucar.edu/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NCAR/CESM2/historical/r3i1p1f1/Omon/tos/gn/v20190308/tos_Omon_CESM2_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' 'bcbd0b9412522ae13070cd010e810a0809a30037deba1030aff2487c20aec458'
'tos_Omon_KACE-1-0-G_historical_r3i1p1f1_gr_185001-201412.nc' 'http://esgf-nimscmip6.apcc21.org/thredds/fileServer/my_cmip6_dataroot/Historical/R3/aa008q-Omon/CMIP6/CMIP/NIMS-KMA/KACE-1-0-G/historical/r3i1p1f1/Omon/tos/gr/v20200130/tos_Omon_KACE-1-0-G_historical_r3i1p1f1_gr_185001-201412.nc' 'SHA256' 'ab9fd79d8087e625392ff5e611affe2a5683921c3d7f3087f9455a29db7c0f02'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_185001-186912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_185001-186912.nc' 'SHA256' '87cb63416aa78274265ea9f8d294fd39af78a61e5af49afef1d15ec024b2a107'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_187001-188912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_187001-188912.nc' 'SHA256' '24fd780ca4febacd97fff1d635c950ec5e467651408153806bae5682ac5829b3'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_189001-190912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_189001-190912.nc' 'SHA256' 'c5f7d7de2e69f66a04dd99fac2348df0dacec80301068674d061375d36fee3ed'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_191001-192912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_191001-192912.nc' 'SHA256' '525a1248a11303f53bdbcc07a8793178291dbd3d8ab366a2afc041ddbdb35467'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_193001-194912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_193001-194912.nc' 'SHA256' 'ae4668309ae35808136a9a2dbe0c7d002ec272a8246f874e18f4bb354b9b2218'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_195001-196912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_195001-196912.nc' 'SHA256' '3b95a1d6c99ca56653869d95f3d11edca8f554f409065d38bf0d06a9594d6da9'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_197001-198912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_197001-198912.nc' 'SHA256' '158d400726bd758a4bf90070b3e31a5053bfd4310c346872852aa5a874db6f30'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_199001-200912.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_199001-200912.nc' 'SHA256' 'd4c9c3a0cbf60bc2f2dfcbbae5b233c88c220d7ab7a6f1c54da389a62329706f'
'tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_201001-201412.nc' 'https://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/CMIP/NOAA-GFDL/GFDL-ESM4/historical/r3i1p1f1/Omon/tos/gr/v20180701/tos_Omon_GFDL-ESM4_historical_r3i1p1f1_gr_201001-201412.nc' 'SHA256' '3697f71fce5ae6ef5354660813c6af2dbd8fa86422ccbaea091259134a5a92b0'
'tos_Omon_NESM3_historical_r3i1p1f1_gn_185001-201412.nc' 'http://esg.lasg.ac.cn/thredds/fileServer/esg_dataroot/CMIP6/CMIP/NUIST/NESM3/historical/r3i1p1f1/Omon/tos/gn/v20190703/tos_Omon_NESM3_historical_r3i1p1f1_gn_185001-201412.nc' 'SHA256' '2cedfce33b58633364ee5c0e1fa5746dcf96c0297d9e5e5b829029c3f4df325e'
'tos_Omon_CIESM_historical_r3i1p1f1_gn_185001-189912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r3i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r3i1p1f1_gn_185001-189912.nc' 'SHA256' '4ff76fb678cbf77c2d752ecb81006a9e6296745a864adaffadab29f4e10545a9'
'tos_Omon_CIESM_historical_r3i1p1f1_gn_190001-194912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r3i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r3i1p1f1_gn_190001-194912.nc' 'SHA256' '18660b4c90b89238a1f1c5571e915ce3899b63590271591c5d769fe50f4da062'
'tos_Omon_CIESM_historical_r3i1p1f1_gn_195001-199912.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r3i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r3i1p1f1_gn_195001-199912.nc' 'SHA256' '89de77509ed33d6d528d6f45a57a5b9ece1420bcc107bee84a13728ad233a886'
'tos_Omon_CIESM_historical_r3i1p1f1_gn_200001-201412.nc' 'https://cmip.dess.tsinghua.edu.cn/thredds/fileServer/esg_dataroot/esg/DRS/ocn/CMIP6/CMIP/THU/CIESM/historical/r3i1p1f1/Omon/tos/gn/v20200220/tos_Omon_CIESM_historical_r3i1p1f1_gn_200001-201412.nc' 'SHA256' '2e327a10830b771ca28add083ef6355eac8823ae96d46014fd05e34807a9e728'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 88 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
